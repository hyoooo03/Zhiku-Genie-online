# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '.\main_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                            QLabel, QPushButton, QTableWidget, QTableWidgetItem,
                            QHeaderView, QStackedWidget, QSpinBox)
from PyQt5.QtCore import Qt
from .main_ui_event import MainUIEvent
from camera import CameraThread


class Ui_Dialog(object):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(800, 480)  # 设置窗口大小为800*480
        Dialog.setWindowTitle("实验室数据采集系统")
        
        # 设置应用程序样式
        style = """
            QDialog {
                background-color: #f0f0f0;
            }
            QPushButton {
                background-color: #2196F3;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-size: 14px;
                min-width: 100px;
                min-height: 30px;
            }
            QPushButton:hover {
                background-color: #1976D2;
            }
            QTableWidget {
                background-color: white;
                gridline-color: #E0E0E0;
                border: 1px solid #E0E0E0;
                border-radius: 4px;
            }
            QTableWidget::item {
                padding: 2px;
            }
            QTableWidget::item:selected {
                background-color: #E3F2FD;
                color: black;
            }
            QTextBrowser {
                background-color: white;
                border: 1px solid #E0E0E0;
                border-radius: 4px;
                padding: 2px;
                font-size: 12px;
            }
            QLabel {
                background-color: white;
                border: 1px solid #E0E0E0;
                border-radius: 4px;
                padding: 2px;
                font-size: 12px;
            }
            QSpinBox {
                background-color: white;
                border: 1px solid #E0E0E0;
                border-radius: 4px;
                padding: 2px;
                font-size: 12px;
                min-width: 100px;
            }
        """
        Dialog.setStyleSheet(style)

        # 主布局
        self.main_layout = QtWidgets.QVBoxLayout(Dialog)
        self.main_layout.setContentsMargins(5, 5, 5, 5)  # 减小边距
        self.main_layout.setSpacing(2)  # 减小间距

        # 顶部区域（包含标题和仓库ID）
        self.top_widget = QtWidgets.QWidget()
        self.top_layout = QtWidgets.QHBoxLayout(self.top_widget)
        self.top_layout.setContentsMargins(0, 0, 0, 0)
        self.top_layout.setSpacing(10)

        # 仓库ID区域
        self.warehouse_widget = QtWidgets.QWidget()
        self.warehouse_layout = QtWidgets.QHBoxLayout(self.warehouse_widget)
        self.warehouse_layout.setContentsMargins(0, 0, 0, 0)
        self.warehouse_label = QtWidgets.QLabel("仓库ID:")
        self.warehouse_id_spinbox = QtWidgets.QSpinBox()
        self.warehouse_id_spinbox.setRange(0, 999)
        self.warehouse_id_spinbox.setValue(0)
        self.warehouse_id_spinbox.setFixedWidth(80)  # 限制宽度
        self.warehouse_layout.addWidget(self.warehouse_label)
        self.warehouse_layout.addWidget(self.warehouse_id_spinbox)
        self.warehouse_layout.addStretch()

        # 标题
        self.title_label = QtWidgets.QLabel("知库精灵")
        self.title_label.setStyleSheet("""
            QLabel {
                font-size: 18px;
                font-weight: bold;
                color: #1976D2;
                background-color: transparent;
                border: none;
                padding: 5px;
            }
        """)

        # 将仓库ID和标题添加到顶部布局
        self.top_layout.addWidget(self.warehouse_widget)
        self.top_layout.addWidget(self.title_label, alignment=QtCore.Qt.AlignCenter)
        self.top_layout.addStretch()  # 添加弹性空间
        
        # 添加WiFi设置按钮
        self.wifi_button = QtWidgets.QPushButton("WiFi")
        self.wifi_button.setIcon(QtGui.QIcon.fromTheme("network-wireless"))
        self.wifi_button.setFixedWidth(60)  # 减小按钮宽度
        self.wifi_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50;
                color: white;
                border: none;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 12px;
                min-width: 60px;
                min-height: 24px;
            }
            QPushButton:hover {
                background-color: #45a049;
            }
        """)
        self.top_layout.addWidget(self.wifi_button)
        
        # 将顶部区域添加到主布局
        self.main_layout.addWidget(self.top_widget)

        # 左侧区域
        self.left_widget = QtWidgets.QWidget()
        self.left_layout = QtWidgets.QVBoxLayout(self.left_widget)
        self.left_layout.setSpacing(5)  # 减小间距

        # 左侧顶部按钮
        self.left_button_layout = QtWidgets.QHBoxLayout()
        self.left_button_layout.setSpacing(5)  # 减小间距
        
        self.serial_button = QtWidgets.QPushButton("设置串口")
        self.serial_button.setIcon(QtGui.QIcon.fromTheme("configure"))
        self.export_button = QtWidgets.QPushButton("导出数据")
        self.export_button.setIcon(QtGui.QIcon.fromTheme("document-save"))
        
        self.left_button_layout.addWidget(self.serial_button)
        self.left_button_layout.addWidget(self.export_button)
        self.left_layout.addLayout(self.left_button_layout)

        # 数据显示区域
        self.display_label = QtWidgets.QLabel()
        self.display_label.setFixedSize(400, 300)  # 增加宽度，使其与整体布局协调
        self.display_label.setAlignment(QtCore.Qt.AlignCenter)
        self.display_label.setStyleSheet("""
            QLabel {
                background-color: black;
                border: 1px solid #E0E0E0;
                border-radius: 4px;
            }
        """)
        self.left_layout.addWidget(self.display_label)

        # 日志区域
        self.log_browser = QtWidgets.QTextBrowser()
        self.log_browser.setMinimumHeight(50)  # 减小日志区域高度
        self.left_layout.addWidget(self.log_browser)

        # 右侧区域
        self.right_widget = QtWidgets.QWidget()
        self.right_layout = QtWidgets.QVBoxLayout(self.right_widget)
        self.right_layout.setSpacing(5)  # 减小间距

        # 右侧顶部按钮
        self.right_button_layout = QtWidgets.QHBoxLayout()
        self.right_button_layout.setSpacing(5)  # 减小间距
        
        self.input_button = QtWidgets.QPushButton("录入")
        self.input_button.setIcon(QtGui.QIcon.fromTheme("document-new"))
        self.use_button = QtWidgets.QPushButton("使用")
        self.use_button.setIcon(QtGui.QIcon.fromTheme("system-run"))
        
        self.right_button_layout.addWidget(self.input_button)
        self.right_button_layout.addWidget(self.use_button)
        self.right_layout.addLayout(self.right_button_layout)

        # 创建堆叠布局来切换两个表格
        self.table_stack = QtWidgets.QStackedWidget()
        
        # 录入表格
        self.input_table = QtWidgets.QTableWidget()
        self.input_table.setColumnCount(2)
        self.input_table.setRowCount(12)  # 保持12行
        self.input_table.setHorizontalHeaderLabels(["参数", "数值"])
        self.input_table.horizontalHeader().setStretchLastSection(True)
        self.input_table.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        self.input_table.verticalHeader().setVisible(True)
        
        # 使用表格
        self.use_table = QtWidgets.QTableWidget()
        self.use_table.setColumnCount(2)
        self.use_table.setRowCount(12)  # 修改为12行，与录入表格保持一致
        self.use_table.setHorizontalHeaderLabels(["参数", "数值"])
        self.use_table.horizontalHeader().setStretchLastSection(True)
        self.use_table.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        self.use_table.verticalHeader().setVisible(True)
        
        # 设置使用表格的前两行数据
        self.use_table.setItem(0, 0, QtWidgets.QTableWidgetItem("使用量"))
        self.use_table.setItem(1, 0, QtWidgets.QTableWidgetItem("净含量"))
        
        # 将表格添加到堆叠布局
        self.table_stack.addWidget(self.input_table)
        self.table_stack.addWidget(self.use_table)
        
        # 默认显示录入表格
        self.table_stack.setCurrentWidget(self.input_table)
        
        self.right_layout.addWidget(self.table_stack)

        # 右侧底部按钮
        self.right_bottom_layout = QtWidgets.QHBoxLayout()
        self.right_bottom_layout.setSpacing(5)  # 减小间距
        
        self.save_button = QtWidgets.QPushButton("保存")
        self.save_button.setIcon(QtGui.QIcon.fromTheme("document-save"))
        self.print_button = QtWidgets.QPushButton("打印")
        self.print_button.setIcon(QtGui.QIcon.fromTheme("document-print"))
        
        self.right_bottom_layout.addWidget(self.save_button)
        self.right_bottom_layout.addWidget(self.print_button)
        self.right_layout.addLayout(self.right_bottom_layout)

        # 添加左右两侧到主内容区域
        self.content_layout = QtWidgets.QHBoxLayout()
        self.content_layout.setSpacing(10)  # 减小间距
        self.content_layout.addWidget(self.left_widget)
        self.content_layout.addWidget(self.right_widget)
        self.main_layout.addLayout(self.content_layout)

        # 状态栏
        self.status_bar = QtWidgets.QStatusBar()
        self.status_bar.setStyleSheet("""
            QStatusBar {
                background-color: #E3F2FD;
                color: #1976D2;
                border-top: 1px solid #BBDEFB;
                font-size: 12px;
            }
        """)
        self.status_bar.showMessage("系统就绪")
        self.main_layout.addWidget(self.status_bar)

        # 设置表格数据
        parameters = [
            "净含量",
            "位置",
            "cas",
            "lot",
            "名称",
            "中文名称",
            "分子式",
            "分子量",
            "纯度"
        ]
        for i, param in enumerate(parameters):
            self.input_table.setItem(i, 0, QtWidgets.QTableWidgetItem(param))
            self.input_table.setItem(i, 1, QtWidgets.QTableWidgetItem(""))

        QtCore.QMetaObject.connectSlotsByName(Dialog)

    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "Dialog"))
        self.serial_button.setText(_translate("Dialog", "设置串口"))
        self.export_button.setText(_translate("Dialog", "导出数据"))
        self.display_label.setText(_translate("Dialog", "数据显示区域"))
        self.input_button.setText(_translate("Dialog", "录入"))
        self.use_button.setText(_translate("Dialog", "使用"))
        self.save_button.setText(_translate("Dialog", "保存"))
        self.print_button.setText(_translate("Dialog", "打印"))

